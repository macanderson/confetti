[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "confetti"
version = "0.1.0"
description = "Powerful configuration management for Python applications"
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [
    { name = "Confetti Authors", email = "team@confetti.dev" }
]
maintainers = [
    { name = "Confetti Team", email = "team@confetti.dev" }
]
keywords = [
    "configuration",
    "config",
    "settings",
    "environment",
    "env",
    "yaml",
    "json",
    "ini",
    "dotenv",
    "redis",
    "github",
    "secrets",
    "12factor"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Typing :: Typed",
    "Framework :: AsyncIO",
]

dependencies = [
    "pyyaml>=6.0.1",
    "redis>=5.0.0",
    "typer>=0.12.0",
    "httpx>=0.27.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    
    # Code quality
    "black>=23.7.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    
    # Type stubs
    "types-pyyaml>=6.0.0",
    "types-redis>=4.6.0",
    
    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    
    # Development tools
    "pre-commit>=3.3.0",
    "ipython>=8.14.0",
    "ipdb>=0.13.0",
    
    # Build tools
    "build>=1.0.0",
    "twine>=4.0.0",
]

docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/confetti-dev/confetti"
Documentation = "https://confetti.readthedocs.io"
Repository = "https://github.com/confetti-dev/confetti"
Issues = "https://github.com/confetti-dev/confetti/issues"
Changelog = "https://github.com/confetti-dev/confetti/blob/main/CHANGELOG.md"

[project.scripts]
confetti = "confetti.cli.__main__:app"

[tool.hatch.version]
path = "confetti/__version__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/confetti",
    "/tests",
    "/docs",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
    "CONTRIBUTING.md",
    "pyproject.toml",
]

[tool.hatch.build.targets.wheel]
packages = ["confetti"]

[tool.black]
line-length = 79
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 79
target-version = "py310"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "D",    # pydocstyle
]
ignore = [
    "E501",  # line too long (handled by black)
    "D203",  # one-blank-line-before-class
    "D213",  # multi-line-summary-second-line
]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=confetti",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
branch = true
source = ["confetti"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "Protocol",
    "@abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
targets = ["confetti"]
skip = ["B101", "B601"]

[tool.isort]
profile = "black"
line_length = 79
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]
